#!/usr/bin/env ruby
require 'rubygems'
require 'swirl'

DIR = File.expand_path(File.dirname(__FILE__))

module Doozer
  SecurityGroup = "doozer"
  SecurityIngress = {
    "IpPermissions.1.IpProtocol" => "tcp",
    "IpPermissions.1.FromPort"   => "8046",
    "IpPermissions.1.ToPort"     => "8046",
    "IpPermissions.1.IpRanges.1.CidrIp" => "0.0.0.0/0",

    "IpPermissions.2.IpProtocol" => "udp",
    "IpPermissions.2.FromPort"   => "8046",
    "IpPermissions.2.ToPort"     => "8046",
    "IpPermissions.2.IpRanges.1.CidrIp" => "0.0.0.0/0",

    "IpPermissions.3.IpProtocol" => "tcp",
    "IpPermissions.3.FromPort"   => "80",
    "IpPermissions.3.ToPort"     => "80",
    "IpPermissions.3.IpRanges.1.CidrIp" => "0.0.0.0/0"
  }
  BenchInstance = {
    "ImageId"       => "ami-4a0df923",
    "MinCount"      => "1",
    "MaxCount"      => "1",
    "UserData"      => File.read(DIR+"/userdata.sh"),
    "KeyName"       => "default",
    "InstanceType"  => "c1.xlarge",
    "SecurityGroup" => [SecurityGroup]
  }
end

class Launch
  attr :e

  def initialize(options)
    @e = Swirl::EC2.new(options)
  end

  def instances(*states)
    response = e.call("DescribeInstances")
    reservations = response["reservationSet"]
    instances = reservations.map {|res| res["instancesSet"] }.flatten

    instances.select do |instance|
      state = instance["instanceState"]["name"]
      states.empty? || states.include?(state)
    end
  end

  def nuke
    ids = instances.map {|instance| instance["instanceId"] }
    e.call "TerminateInstances", "InstanceId" => ids
  end

  def create_security_group(name, ingress)
    e.call(
      "CreateSecurityGroup",
      "GroupName" => name,
      "GroupDescription" => name
    ) rescue nil

    e.call(ingress.merge(
      "AuthorizeSecurityGroupIngress",
      "GroupName" => name
    )) rescue nil
  end

  def run_instance(args)
    if args && args.has_key?("UserData")
      args["UserData"] = Base64.encode64(args["UserData"])
    end

    e.call(
      "RunInstances",
      {
        "MinCount" => "1",
        "MaxCount" => "1"
      }.merge(args)
    )
  end
end

def main(argv)
  launch = Launch.new(
    :version => "2010-08-31",
    :aws_access_key_id => `git config aws.id`.chomp,
    :aws_secret_access_key => `git config aws.key`.chomp
  )

  case true
  when argv.include?("--nuke")
    launch.nuke
    exit
  when argv.include?("--list") || argv.include?("-l")
    launch.instances("running", "pending").each do |instance|
      next if instance["dnsName"] == nil
      puts instance["dnsName"]
    end
  else
    launch.create_security_group(
      Doozer::SecurityGroup,
      Doozer::SecurityIngress
    )
    response = launch.run_instance(Doozer::BenchInstance)
    instances = response["instancesSet"]
    ids = instances.map {|instance| instance["instanceId"] }
    $stderr.puts "--- launched #{ids.join(" ")}"
    main "--list"
  end
end

main(ARGV)
