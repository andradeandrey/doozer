#!/usr/bin/python

# doozerfs -- FUSE plugin for doozer (readonly)

import errno
import fuse
import os
import redis
import stat
import time

fuse.fuse_python_api = (0,2)

# TODO support multiple clusters
# TODO special "local" cluster
# TODO special "global" cluster
# TODO find cluster members from the DNS
# TODO find cluster members from the global cluster
# TODO caching
# TODO support writes

DIR = 'dir'
MISSING = '0'

doozer_host = 'localhost'
doozer_port = 8046
doozer_name = 'local'

class Stat(fuse.Stat):
    def __init__(self):
        self.st_mode = stat.S_IFDIR|0555
        self.st_ino = 0
        self.st_dev = 0
        self.st_nlink = 2
        self.st_uid = 0
        self.st_gid = 0
        self.st_size = 0
        self.st_atime = 0
        self.st_mtime = 0
        self.st_ctime = 0

def getDepth(path):
    """
    Return the depth of a given path, zero-based from root ('/')
    """
    if path == '/':
        return 0
    else:
        return path.count('/')

def getParts(path):
    """
    Return the slash-separated parts of a given path as a list
    """
    if path == '/':
        return [['/']]
    else:
        return path.split('/')

class JuntaFS(fuse.Fuse):
    def __init__(self, *args, **kw):
        fuse.Fuse.__init__(self, *args, **kw)

    def getattr(self, path):
        """
        - st_mode (protection bits)
        - st_ino (inode number)
        - st_dev (device)
        - st_nlink (number of hard links)
        - st_uid (user ID of owner)
        - st_gid (group ID of owner)
        - st_size (size of file, in bytes)
        - st_atime (time of most recent access)
        - st_mtime (time of most recent content modification)
        - st_ctime (platform dependent; time of most recent metadata change on Unix,
                    or the time of creation on Windows).
        """

        st = Stat()
        ps = path.split('/')[1:]
        v, cas = None, MISSING

        if path == '/':
            cas = DIR
        elif ps[0] != doozer_name:
            return -errno.ENOENT
        elif len(ps) == 1:
            cas = DIR
        else:
            v, cas = self.redis.execute_command('get', '/d' + path)

        if cas == DIR:
            pass # Stat object defaults to dir
        elif cas == MISSING:
            return -errno.ENOENT
        else:
            st.st_mode = stat.S_IFREG|0444
            st.st_nlink = 1
            st.st_size = len(v[0])

        return st

    def readdir(self, path, offset):
        dents = ['.', '..']
        ps = path.split('/')[1:]
        cas = MISSING

        if path == '/':
            dents.append(doozer_name)
            cas = DIR
        elif ps[0] != doozer_name:
            return
        elif len(ps) == 1:
            # TODO remove this workaround when doozer gets fixed
            v, cas = self.redis.execute_command('get', '/d' + path + '/')
            dents.extend(v)
        else:
            v, cas = self.redis.execute_command('get', '/d' + path)
            dents.extend(v)

        if cas != DIR:
            return

        for dent in dents:
            yield fuse.Direntry(dent)

    def mknod(self, path, mode, dev):
        return -errno.ENOSYS

    def unlink(self, path):
        return -errno.ENOSYS

    def read(self, path, size, offset):
        ps = path.split('/')[1:]
        v, cas = None, MISSING

        if path == '/':
            cas = DIR
        elif ps[0] != doozer_name:
            return -errno.ENOENT
        elif len(ps) == 1:
            cas = DIR
        else:
            v, cas = self.redis.execute_command('get', '/d' + path)

        if cas == DIR:
            pass # Stat object defaults to dir
        elif cas == MISSING:
            return -errno.ENOENT
        else:
            return v[0][offset:offset+size]

        return -errno.ENOENT

    def write(self, path, buf, offset):
        return -errno.ENOSYS

    def release(self, path, flags):
        return -errno.ENOSYS

    def open(self, path, flags):
        return 0
        return -errno.ENOSYS

    def truncate(self, path, size):
        return -errno.ENOSYS

    def utime(self, path, times):
        return -errno.ENOSYS

    def mkdir(self, path, mode):
        return -errno.ENOSYS

    def rmdir(self, path):
        return -errno.ENOSYS

    def rename(self, oldPath, newPath):
        return -errno.ENOSYS

    def fsync(self, path, isFsyncFile):
        return 0

def main():
    usage='''doozerfs: a FUSE plugin to access doozer files from the Linux VFS.

    Note: this is readonly for now.
    ''' + fuse.Fuse.fusage

    r = redis.Redis(host=doozer_host, port=doozer_port)
    try:
        r.execute_command('get', '/d/' + doozer_name + '/')
    except Exception, ex:
        pass # swallow the initial SELECT command error

    fs = JuntaFS(version='%prog ' + fuse.__version__,
                 usage=usage,
                 dash_s_do='setsingle')
    fs.redis = r
    fs.flags = 0
    fs.multithreaded = 0
    fs.parse(errex=1)
    fs.main()

if __name__ == '__main__':
    main()
